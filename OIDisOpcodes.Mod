(* begin-module-use-description
Module OIDisOpcodes provides x86_64 opcode names and tokens.
    
end-module-use-description *)
(* begin-module-develop-description
    
(CP 2020)
    
**OIDisOpcode** provides x86_64 opcode names and tokens for the OIDis disassembler.
end-module-develop-description *)
MODULE OIDisOpcodes;   (*CP 2020*)
  IMPORT SYSTEM;
    
  CONST
    invalid* = 0; invalidStr* = "invalid";
    aaa* = 1; aaaStr* = "aaa";
    aad* = 2; aadStr* = "aad";
    aam* = 3; aamStr* = "aam";
    aas* = 4; aasStr* = "aas";
    adc* = 5; adcStr* = "adc";
    add* = 6; addStr* = "add";
    addpd* = 7; addpdStr* = "addpd";
    addps* = 8; addpsStr* = "addps";
    addsd* = 9; addsdStr* = "addsd";
    addss* = 10; addssStr* = "addss";
    addsubpd* = 11; addsubpdStr* = "addsubpd";
    addsubps* = 12; addsubpsStr* = "addsubps";
    and* = 13; andStr* = "and";
    andnpd* = 14; andnpdStr* = "andnpd";
    andnps* = 15; andnpsStr* = "andnps";
    andpd* = 16; andpdStr* = "andpd";
    andps* = 17; andpsStr* = "andps";
    arpl* = 18; arplStr* = "arpl";
    bound* = 19; boundStr* = "bound";
    bsf* = 20; bsfStr* = "bsf";
    bsr* = 21; bsrStr* = "bsr";
    bswap* = 22; bswapStr* = "bswap";
    bt* = 23; btStr* = "bt";
    btc* = 24; btcStr* = "btc";
    btr* = 25; btrStr* = "btr";
    bts* = 26; btsStr* = "bts";
    call* = 27; callStr* = "call";
    cbw* = 28; cbwStr* = "cbw";
    cdq* = 29; cdqStr* = "cdq";
    cdqe* = 30; cdqeStr* = "cdqe";
    clc* = 31; clcStr* = "clc";
    cld* = 32; cldStr* = "cld";
    clflush* = 33; clflushStr* = "clflush";
    clgi* = 34; clgiStr* = "clgi";
    cli* = 35; cliStr* = "cli";
    clts* = 36; cltsStr* = "clts";
    cmc* = 37; cmcStr* = "cmc";
    cmova* = 38; cmovaStr* = "cmova";
    cmovae* = 39; cmovaeStr* = "cmovae";
    cmovb* = 40; cmovbStr* = "cmovb";
    cmovbe* = 41; cmovbeStr* = "cmovbe";
    cmovg* = 42; cmovgStr* = "cmovg";
    cmovge* = 43; cmovgeStr* = "cmovge";
    cmovl* = 44; cmovlStr* = "cmovl";
    cmovle* = 45; cmovleStr* = "cmovle";
    cmovno* = 46; cmovnoStr* = "cmovno";
    cmovnp* = 47; cmovnpStr* = "cmovnp";
    cmovns* = 48; cmovnsStr* = "cmovns";
    cmovnz* = 49; cmovnzStr* = "cmovnz";
    cmovo* = 50; cmovoStr* = "cmovo";
    cmovp* = 51; cmovpStr* = "cmovp";
    cmovs* = 52; cmovsStr* = "cmovs";
    cmovz* = 53; cmovzStr* = "cmovz";
    cmp* = 54; cmpStr* = "cmp";
    cmppd* = 55; cmppdStr* = "cmppd";
    cmpps* = 56; cmppsStr* = "cmpps";
    cmpsb* = 57; cmpsbStr* = "cmpsb";
    cmpsd* = 58; cmpsdStr* = "cmpsd";
    cmpsq* = 59; cmpsqStr* = "cmpsq";
    cmpss* = 60; cmpssStr* = "cmpss";
    cmpsw* = 61; cmpswStr* = "cmpsw";
    cmpxchg* = 62; cmpxchgStr* = "cmpxchg";
    cmpxchg8b* = 63; cmpxchg8bStr* = "cmpxchg8b";
    comisd* = 64; comisdStr* = "comisd";
    comiss* = 65; comissStr* = "comiss";
    cpuid* = 66; cpuidStr* = "cpuid";
    cqo* = 67; cqoStr* = "cqo";
    cvtdq2pd* = 68; cvtdq2pdStr* = "cvtdq2pd";
    cvtdq2ps* = 69; cvtdq2psStr* = "cvtdq2ps";
    cvtpd2dq* = 70; cvtpd2dqStr* = "cvtpd2dq";
    cvtpd2pi* = 71; cvtpd2piStr* = "cvtpd2pi";
    cvtpd2ps* = 72; cvtpd2psStr* = "cvtpd2ps";
    cvtpi2pd* = 73; cvtpi2pdStr* = "cvtpi2pd";
    cvtpi2ps* = 74; cvtpi2psStr* = "cvtpi2ps";
    cvtps2dq* = 75; cvtps2dqStr* = "cvtps2dq";
    cvtps2pd* = 76; cvtps2pdStr* = "cvtps2pd";
    cvtps2pi* = 77; cvtps2piStr* = "cvtps2pi";
    cvtsd2si* = 78; cvtsd2siStr* = "cvtsd2si";
    cvtsd2ss* = 79; cvtsd2ssStr* = "cvtsd2ss";
    cvtsi2sd* = 80; cvtsi2sdStr* = "cvtsi2sd";
    cvtsi2ss* = 81; cvtsi2ssStr* = "cvtsi2ss";
    cvtss2sd* = 82; cvtss2sdStr* = "cvtss2sd";
    cvtss2si* = 83; cvtss2siStr* = "cvtss2si";
    cvttpd2dq* = 84; cvttpd2dqStr* = "cvttpd2dq";
    cvttpd2pi* = 85; cvttpd2piStr* = "cvttpd2pi";
    cvttps2dq* = 86; cvttps2dqStr* = "cvttps2dq";
    cvttps2pi* = 87; cvttps2piStr* = "cvttps2pi";
    cvttsd2si* = 88; cvttsd2siStr* = "cvttsd2si";
    cvttss2si* = 89; cvttss2siStr* = "cvttss2si";
    cwd* = 90; cwdStr* = "cwd";
    cwde* = 91; cwdeStr* = "cwde";
    daa* = 92; daaStr* = "daa";
    das* = 93; dasStr* = "das";
    dec* = 94; decStr* = "dec";
    div* = 95; divStr* = "div";
    divpd* = 96; divpdStr* = "divpd";
    divps* = 97; divpsStr* = "divps";
    divsd* = 98; divsdStr* = "divsd";
    divss* = 99; divssStr* = "divss";
    emms* = 100; emmsStr* = "emms";
    undetermined* = 101; undeterminedStr* = "UNDETERMINED";
    enter* = 102; enterStr* = "enter";
    f2xm1* = 103; f2xm1Str* = "f2xm1";
    fabs* = 104; fabsStr* = "fabs";
    fadd* = 105; faddStr* = "fadd";
    faddp* = 106; faddpStr* = "faddp";
    fbld* = 107; fbldStr* = "fbld";
    fbstp* = 108; fbstpStr* = "fbstp";
    fchs* = 109; fchsStr* = "fchs";
    fclex* = 110; fclexStr* = "fclex";
    fcmovb* = 111; fcmovbStr* = "fcmovb";
    fcmovbe* = 112; fcmovbeStr* = "fcmovbe";
    fcmove* = 113; fcmoveStr* = "fcmove";
    fcmovnb* = 114; fcmovnbStr* = "fcmovnb";
    fcmovnbe* = 115; fcmovnbeStr* = "fcmovnbe";
    fcmovne* = 116; fcmovneStr* = "fcmovne";
    fcmovnu* = 117; fcmovnuStr* = "fcmovnu";
    fcmovu* = 118; fcmovuStr* = "fcmovu";
    fcom* = 119; fcomStr* = "fcom";
    fcom2* = 120; fcom2Str* = "fcom2";
    fcomi* = 121; fcomiStr* = "fcomi";
    fcomip* = 122; fcomipStr* = "fcomip";
    fcomp* = 123; fcompStr* = "fcomp";
    fcomp3* = 124; fcomp3Str* = "fcomp3";
    fcomp5* = 125; fcomp5Str* = "fcomp5";
    fcompp* = 126; fcomppStr* = "fcompp";
    fcos* = 127; fcosStr* = "fcos";
    fdecstp* = 128; fdecstpStr* = "fdecstp";
    fdiv* = 129; fdivStr* = "fdiv";
    fdivp* = 130; fdivpStr* = "fdivp";
    fdivr* = 131; fdivrStr* = "fdivr";
    fdivrp* = 132; fdivrpStr* = "fdivrp";
    femms* = 133; femmsStr* = "femms";
    ffree* = 134; ffreeStr* = "ffree";
    ffreep* = 135; ffreepStr* = "ffreep";
    fiadd* = 136; fiaddStr* = "fiadd";
    ficom* = 137; ficomStr* = "ficom";
    ficomp* = 138; ficompStr* = "ficomp";
    fidiv* = 139; fidivStr* = "fidiv";
    fidivr* = 140; fidivrStr* = "fidivr";
    fild* = 141; fildStr* = "fild";
    fimul* = 142; fimulStr* = "fimul";
    fist* = 143; fistStr* = "fist";
    fistp* = 144; fistpStr* = "fistp";
    fisttp* = 145; fisttpStr* = "fisttp";
    fisub* = 146; fisubStr* = "fisub";
    fisubr* = 147; fisubrStr* = "fisubr";
    fld* = 148; fldStr* = "fld";
    fld1* = 149; fld1Str* = "fld1";
    fldcw* = 150; fldcwStr* = "fldcw";
    fldenv* = 151; fldenvStr* = "fldenv";
    fldl2e* = 152; fldl2eStr* = "fldl2e";
    fldl2t* = 153; fldl2tStr* = "fldl2t";
    fldlg2* = 154; fldlg2Str* = "fldlg2";
    fldln2* = 155; fldln2Str* = "fldln2";
    fldlpi* = 156; fldlpiStr* = "fldlpi";
    fldz* = 157; fldzStr* = "fldz";
    fmul* = 158; fmulStr* = "fmul";
    fmulp* = 159; fmulpStr* = "fmulp";
    fncstp* = 160; fncstpStr* = "fncstp";
    fninit* = 161; fninitStr* = "fninit";
    fnop* = 162; fnopStr* = "fnop";
    fnsave* = 163; fnsaveStr* = "fnsave";
    fnstcw* = 164; fnstcwStr* = "fnstcw";
    fnstenv* = 165; fnstenvStr* = "fnstenv";
    fnstsw* = 166; fnstswStr* = "fnstsw";
    fpatan* = 167; fpatanStr* = "fpatan";
    fprem* = 168; fpremStr* = "fprem";
    fprem1* = 169; fprem1Str* = "fprem1";
    fptan* = 170; fptanStr* = "fptan";
    fpxtract* = 171; fpxtractStr* = "fpxtract";
    frndint* = 172; frndintStr* = "frndint";
    frstor* = 173; frstorStr* = "frstor";
    fscale* = 174; fscaleStr* = "fscale";
    fsin* = 175; fsinStr* = "fsin";
    fsincos* = 176; fsincosStr* = "fsincos";
    fsqrt* = 177; fsqrtStr* = "fsqrt";
    fst* = 178; fstStr* = "fst";
    fstp* = 179; fstpStr* = "fstp";
    fstp1* = 180; fstp1Str* = "fstp1";
    fstp8* = 181; fstp8Str* = "fstp8";
    fstp9* = 182; fstp9Str* = "fstp9";
    fsub* = 183; fsubStr* = "fsub";
    fsubp* = 184; fsubpStr* = "fsubp";
    fsubr* = 185; fsubrStr* = "fsubr";
    fsubrp* = 186; fsubrpStr* = "fsubrp";
    ftst* = 187; ftstStr* = "ftst";
    fucom* = 188; fucomStr* = "fucom";
    fucomi* = 189; fucomiStr* = "fucomi";
    fucomip* = 190; fucomipStr* = "fucomip";
    fucomp* = 191; fucompStr* = "fucomp";
    fucompp* = 192; fucomppStr* = "fucompp";
    fxam* = 193; fxamStr* = "fxam";
    fxch* = 194; fxchStr* = "fxch";
    fxch4* = 195; fxch4Str* = "fxch4";
    fxch7* = 196; fxch7Str* = "fxch7";
    fxrstor* = 197; fxrstorStr* = "fxrstor";
    fxsave* = 198; fxsaveStr* = "fxsave";
    fyl2x* = 199; fyl2xStr* = "fyl2x";
    fyl2xp1* = 200; fyl2xp1Str* = "fyl2xp1";
    grpasize* = 201; grpasizeStr* = "grpasize";
    grpmod* = 202; grpmodStr* = "grpmod";
    grpmode* = 203; grpmodeStr* = "grpmode";
    grposize* = 204; grposizeStr* = "grposize";
    grpreg* = 205; grpregStr* = "grpreg";
    grprm* = 206; grprmStr* = "grprm";
    grpv* = 207; grpvStr* = "grpv";
    grpx87* = 208; grpx87Str* = "grpx87";
    haddpd* = 209; haddpdStr* = "haddpd";
    haddps* = 210; haddpsStr* = "haddps";
    hlt* = 211; hltStr* = "hlt";
    hsubpd* = 212; hsubpdStr* = "hsubpd";
    hsubps* = 213; hsubpsStr* = "hsubps";
    idiv* = 214; idivStr* = "idiv";
    foo* = 215; fooStr* = "foo";
    imul* = 216; imulStr* = "imul";
    in* = 217; inStr* = "in";
    inc* = 218; incStr* = "inc";
    inop* = 219; inopStr* = "inop";
    insb* = 220; insbStr* = "insb";
    insd* = 221; insdStr* = "insd";
    insw* = 222; inswStr* = "insw";
    int* = 223; intStr* = "int";
    int1* = 224; int1Str* = "int1";
    int3* = 225; int3Str* = "int3";
    into* = 226; intoStr* = "into";
    bar* = 227; barStr* = "bar";
    invd* = 228; invdStr* = "invd";
    invlpg* = 229; invlpgStr* = "invlpg";
    invlpga* = 230; invlpgaStr* = "invlpga";
    ipause* = 231; ipauseStr* = "ipause";
    iretd* = 232; iretdStr* = "iretd";
    iretq* = 233; iretqStr* = "iretq";
    iretw* = 234; iretwStr* = "iretw";
    ja* = 235; jaStr* = "ja";
    jae* = 236; jaeStr* = "jae";
    jb* = 237; jbStr* = "jb";
    jbe* = 238; jbeStr* = "jbe";
    jcxz* = 239; jcxzStr* = "jcxz";
    jecxz* = 240; jecxzStr* = "jecxz";
    jg* = 241; jgStr* = "jg";
    jge* = 242; jgeStr* = "jge";
    jl* = 243; jlStr* = "jl";
    jle* = 244; jleStr* = "jle";
    jmp* = 245; jmpStr* = "jmp";
    jno* = 246; jnoStr* = "jno";
    jnp* = 247; jnpStr* = "jnp";
    jns* = 248; jnsStr* = "jns";
    jnz* = 249; jnzStr* = "jnz";
    jo* = 250; joStr* = "jo";
    jp* = 251; jpStr* = "jp";
    jrcxz* = 252; jrcxzStr* = "jrcxz";
    js* = 253; jsStr* = "js";
    jz* = 254; jzStr* = "jz";
    lahf* = 255; lahfStr* = "lahf";
    lar* = 256; larStr* = "lar";
    lddqu* = 257; lddquStr* = "lddqu";
    ldmxcsr* = 258; ldmxcsrStr* = "ldmxcsr";
    lds* = 259; ldsStr* = "lds";
    lea* = 260; leaStr* = "lea";
    leave* = 261; leaveStr* = "leave";
    les* = 262; lesStr* = "les";
    lfence* = 263; lfenceStr* = "lfence";
    lfs* = 264; lfsStr* = "lfs";
    lgdt* = 265; lgdtStr* = "lgdt";
    lgs* = 266; lgsStr* = "lgs";
    lidt* = 267; lidtStr* = "lidt";
    lldt* = 268; lldtStr* = "lldt";
    lmsw* = 269; lmswStr* = "lmsw";
    lock* = 270; lockStr* = "lock";
    lodsb* = 271; lodsbStr* = "lodsb";
    lodsd* = 272; lodsdStr* = "lodsd";
    lodsq* = 273; lodsqStr* = "lodsq";
    lodsw* = 274; lodswStr* = "lodsw";
    loop* = 275; loopStr* = "loop";
    loope* = 276; loopeStr* = "loope";
    loopnz* = 277; loopnzStr* = "loopnz";
    lsl* = 278; lslStr* = "lsl";
    lss* = 279; lssStr* = "lss";
    ltr* = 280; ltrStr* = "ltr";
    maskmovq* = 281; maskmovqStr* = "maskmovq";
    maxpd* = 282; maxpdStr* = "maxpd";
    maxps* = 283; maxpsStr* = "maxps";
    maxsd* = 284; maxsdStr* = "maxsd";
    maxss* = 285; maxssStr* = "maxss";
    mfence* = 286; mfenceStr* = "mfence";
    minpd* = 287; minpdStr* = "minpd";
    minps* = 288; minpsStr* = "minps";
    minsd* = 289; minsdStr* = "minsd";
    minss* = 290; minssStr* = "minss";
    monitor* = 291; monitorStr* = "monitor";
    mov* = 292; movStr* = "mov";
    movapd* = 293; movapdStr* = "movapd";
    movaps* = 294; movapsStr* = "movaps";
    movd* = 295; movdStr* = "movd";
    movddup* = 296; movddupStr* = "movddup";
    movdq2q* = 297; movdq2qStr* = "movdq2q";
    movdqa* = 298; movdqaStr* = "movdqa";
    movdqu* = 299; movdquStr* = "movdqu";
    movhpd* = 300; movhpdStr* = "movhpd";
    movhps* = 301; movhpsStr* = "movhps";
    movlpd* = 302; movlpdStr* = "movlpd";
    movlps* = 303; movlpsStr* = "movlps";
    movmskpd* = 304; movmskpdStr* = "movmskpd";
    movmskps* = 305; movmskpsStr* = "movmskps";
    movntdq* = 306; movntdqStr* = "movntdq";
    movnti* = 307; movntiStr* = "movnti";
    movntpd* = 308; movntpdStr* = "movntpd";
    movntps* = 309; movntpsStr* = "movntps";
    movntq* = 310; movntqStr* = "movntq";
    movq* = 311; movqStr* = "movq";
    movq2dq* = 312; movq2dqStr* = "movq2dq";
    movqa* = 313; movqaStr* = "movqa";
    movsb* = 314; movsbStr* = "movsb";
    movsd* = 315; movsdStr* = "movsd";
    movshdup* = 316; movshdupStr* = "movshdup";
    movsldup* = 317; movsldupStr* = "movsldup";
    movsq* = 318; movsqStr* = "movsq";
    movss* = 319; movssStr* = "movss";
    movsw* = 320; movswStr* = "movsw";
    movsx* = 321; movsxStr* = "movsx";
    movsxd* = 322; movsxdStr* = "movsxd";
    movupd* = 323; movupdStr* = "movupd";
    movups* = 324; movupsStr* = "movups";
    movzx* = 325; movzxStr* = "movzx";
    mul* = 326; mulStr* = "mul";
    mulpd* = 327; mulpdStr* = "mulpd";
    mulps* = 328; mulpsStr* = "mulps";
    mulsd* = 329; mulsdStr* = "mulsd";
    mulss* = 330; mulssStr* = "mulss";
    mwait* = 331; mwaitStr* = "mwait";
    neg* = 332; negStr* = "neg";
    nop* = 333; nopStr* = "nop";
    not* = 334; notStr* = "not";
    or* = 335; orStr* = "or";
    orpd* = 336; orpdStr* = "orpd";
    orps* = 337; orpsStr* = "orps";
    out* = 338; outStr* = "out";
    outsb* = 339; outsbStr* = "outsb";
    outsd* = 340; outsdStr* = "outsd";
    outsq* = 341; outsqStr* = "outsq";
    outsw* = 342; outswStr* = "outsw";
    packssdw* = 343; packssdwStr* = "packssdw";
    packsswb* = 344; packsswbStr* = "packsswb";
    packuswb* = 345; packuswbStr* = "packuswb";
    paddb* = 346; paddbStr* = "paddb";
    paddq* = 347; paddqStr* = "paddq";
    paddsb* = 348; paddsbStr* = "paddsb";
    paddsw* = 349; paddswStr* = "paddsw";
    paddusb* = 350; paddusbStr* = "paddusb";
    paddusw* = 351; padduswStr* = "paddusw";
    paddw* = 352; paddwStr* = "paddw";
    pand* = 353; pandStr* = "pand";
    pandn* = 354; pandnStr* = "pandn";
    pavgb* = 355; pavgbStr* = "pavgb";
    pavgw* = 356; pavgwStr* = "pavgw";
    pcmpeqb* = 357; pcmpeqbStr* = "pcmpeqb";
    pcmpeqd* = 358; pcmpeqdStr* = "pcmpeqd";
    pcmpeqw* = 359; pcmpeqwStr* = "pcmpeqw";
    pcmpgtb* = 360; pcmpgtbStr* = "pcmpgtb";
    pcmpgtd* = 361; pcmpgtdStr* = "pcmpgtd";
    pcmpgtw* = 362; pcmpgtwStr* = "pcmpgtw";
    pextrw* = 363; pextrwStr* = "pextrw";
    pinsrw* = 364; pinsrwStr* = "pinsrw";
    pmaddwd* = 365; pmaddwdStr* = "pmaddwd";
    pmaxsw* = 366; pmaxswStr* = "pmaxsw";
    pmaxub* = 367; pmaxubStr* = "pmaxub";
    pminsw* = 368; pminswStr* = "pminsw";
    pminub* = 369; pminubStr* = "pminub";
    pmovmskb* = 370; pmovmskbStr* = "pmovmskb";
    pmulhuw* = 371; pmulhuwStr* = "pmulhuw";
    pmulhw* = 372; pmulhwStr* = "pmulhw";
    pmullw* = 373; pmullwStr* = "pmullw";
    pmuludq* = 374; pmuludqStr* = "pmuludq";
    pop* = 375; popStr* = "pop";
    popa* = 376; popaStr* = "popa";
    popad* = 377; popadStr* = "popad";
    popfd* = 378; popfdStr* = "popfd";
    popfq* = 379; popfqStr* = "popfq";
    popfw* = 380; popfwStr* = "popfw";
    por* = 381; porStr* = "por";
    prefetch* = 382; prefetchStr* = "prefetch";
    prefetchnta* = 383; prefetchntaStr* = "prefetchnta";
    prefetcht0* = 384; prefetcht0Str* = "prefetcht0";
    prefetcht1* = 385; prefetcht1Str* = "prefetcht1";
    prefetcht2* = 386; prefetcht2Str* = "prefetcht2";
    baz* = 387; bazStr* = "baz";
    psadbw* = 388; psadbwStr* = "psadbw";
    pshufd* = 389; pshufdStr* = "pshufd";
    pshufhw* = 390; pshufhwStr* = "pshufhw";
    pshuflw* = 391; pshuflwStr* = "pshuflw";
    pshufw* = 392; pshufwStr* = "pshufw";
    pslld* = 393; pslldStr* = "pslld";
    pslldq* = 394; pslldqStr* = "pslldq";
    psllq* = 395; psllqStr* = "psllq";
    psllw* = 396; psllwStr* = "psllw";
    psrad* = 397; psradStr* = "psrad";
    psraw* = 398; psrawStr* = "psraw";
    psrld* = 399; psrldStr* = "psrld";
    psrldq* = 400; psrldqStr* = "psrldq";
    psrlq* = 401; psrlqStr* = "psrlq";
    psrlw* = 402; psrlwStr* = "psrlw";
    psubb* = 403; psubbStr* = "psubb";
    psubd* = 404; psubdStr* = "psubd";
    psubq* = 405; psubqStr* = "psubq";
    psubsb* = 406; psubsbStr* = "psubsb";
    psubsw* = 407; psubswStr* = "psubsw";
    psubusb* = 408; psubusbStr* = "psubusb";
    psubusw* = 409; psubuswStr* = "psubusw";
    psubw* = 410; psubwStr* = "psubw";
    punpckhbw* = 411; punpckhbwStr* = "punpckhbw";
    punpckhdq* = 412; punpckhdqStr* = "punpckhdq";
    punpckhqdq* = 413; punpckhqdqStr* = "punpckhqdq";
    punpckhwd* = 414; punpckhwdStr* = "punpckhwd";
    punpcklbw* = 415; punpcklbwStr* = "punpcklbw";
    punpckldq* = 416; punpckldqStr* = "punpckldq";
    punpcklqdq* = 417; punpcklqdqStr* = "punpcklqdq";
    punpcklwd* = 418; punpcklwdStr* = "punpcklwd";
    push* = 419; pushStr* = "push";
    pusha* = 420; pushaStr* = "pusha";
    pushad* = 421; pushadStr* = "pushad";
    pushfd* = 422; pushfdStr* = "pushfd";
    pushfq* = 423; pushfqStr* = "pushfq";
    pushfw* = 424; pushfwStr* = "pushfw";
    pxor* = 425; pxorStr* = "pxor";
    rcl* = 426; rclStr* = "rcl";
    rcpps* = 427; rcppsStr* = "rcpps";
    rcpss* = 428; rcpssStr* = "rcpss";
    rcr* = 429; rcrStr* = "rcr";
    rdmsr* = 430; rdmsrStr* = "rdmsr";
    rdpmc* = 431; rdpmcStr* = "rdpmc";
    rdtsc* = 432; rdtscStr* = "rdtsc";
    rdtscp* = 433; rdtscpStr* = "rdtscp";
    rep* = 434; repStr* = "rep";
    repne* = 435; repneStr* = "repne";
    ret* = 436; retStr* = "ret";
    retf* = 437; retfStr* = "retf";
    rol* = 438; rolStr* = "rol";
    ror* = 439; rorStr* = "ror";
    rsm* = 440; rsmStr* = "rsm";
    rsqrtps* = 441; rsqrtpsStr* = "rsqrtps";
    rsqrtss* = 442; rsqrtssStr* = "rsqrtss";
    sahf* = 443; sahfStr* = "sahf";
    salc* = 444; salcStr* = "salc";
    sar* = 445; sarStr* = "sar";
    sbb* = 446; sbbStr* = "sbb";
    scasb* = 447; scasbStr* = "scasb";
    scasd* = 448; scasdStr* = "scasd";
    scasq* = 449; scasqStr* = "scasq";
    scasw* = 450; scaswStr* = "scasw";
    seta* = 451; setaStr* = "seta";
    setb* = 452; setbStr* = "setb";
    setbe* = 453; setbeStr* = "setbe";
    setg* = 454; setgStr* = "setg";
    setge* = 455; setgeStr* = "setge";
    setl* = 456; setlStr* = "setl";
    setle* = 457; setleStr* = "setle";
    setnb* = 458; setnbStr* = "setnb";
    setno* = 459; setnoStr* = "setno";
    setnp* = 460; setnpStr* = "setnp";
    setns* = 461; setnsStr* = "setns";
    setnz* = 462; setnzStr* = "setnz";
    seto* = 463; setoStr* = "seto";
    setp* = 464; setpStr* = "setp";
    sets* = 465; setsStr* = "sets";
    setz* = 466; setzStr* = "setz";
    sfence* = 467; sfenceStr* = "sfence";
    sgdt* = 468; sgdtStr* = "sgdt";
    shl* = 469; shlStr* = "shl";
    shld* = 470; shldStr* = "shld";
    shr* = 471; shrStr* = "shr";
    shrd* = 472; shrdStr* = "shrd";
    shufpd* = 473; shufpdStr* = "shufpd";
    shufps* = 474; shufpsStr* = "shufps";
    sidt* = 475; sidtStr* = "sidt";
    skinit* = 476; skinitStr* = "skinit";
    sldt* = 477; sldtStr* = "sldt";
    smsw* = 478; smswStr* = "smsw";
    sqrtpd* = 479; sqrtpdStr* = "sqrtpd";
    sqrtps* = 480; sqrtpsStr* = "sqrtps";
    sqrtsd* = 481; sqrtsdStr* = "sqrtsd";
    sqrtss* = 482; sqrtssStr* = "sqrtss";
    stc* = 483; stcStr* = "stc";
    std* = 484; stdStr* = "std";
    stgi* = 485; stgiStr* = "stgi";
    sti* = 486; stiStr* = "sti";
    stmxcsr* = 487; stmxcsrStr* = "stmxcsr";
    stosb* = 488; stosbStr* = "stosb";
    stosd* = 489; stosdStr* = "stosd";
    stosq* = 490; stosqStr* = "stosq";
    stosw* = 491; stoswStr* = "stosw";
    str* = 492; strStr* = "str";
    sub* = 493; subStr* = "sub";
    subpd* = 494; subpdStr* = "subpd";
    subps* = 495; subpsStr* = "subps";
    subsd* = 496; subsdStr* = "subsd";
    subss* = 497; subssStr* = "subss";
    swapgs* = 498; swapgsStr* = "swapgs";
    syscall* = 499; syscallStr* = "syscall";
    sysenter* = 500; sysenterStr* = "sysenter";
    sysexit* = 501; sysexitStr* = "sysexit";
    sysret* = 502; sysretStr* = "sysret";
    test* = 503; testStr* = "test";
    ucomisd* = 504; ucomisdStr* = "ucomisd";
    ucomiss* = 505; ucomissStr* = "ucomiss";
    ud2* = 506; ud2Str* = "ud2";
    unpckhpd* = 507; unpckhpdStr* = "unpckhpd";
    unpckhps* = 508; unpckhpsStr* = "unpckhps";
    unpcklpd* = 509; unpcklpdStr* = "unpcklpd";
    unpcklps* = 510; unpcklpsStr* = "unpcklps";
    verr* = 511; verrStr* = "verr";
    verw* = 512; verwStr* = "verw";
    vmcall* = 513; vmcallStr* = "vmcall";
    vmclear* = 514; vmclearStr* = "vmclear";
    vmload* = 515; vmloadStr* = "vmload";
    vmmcall* = 516; vmmcallStr* = "vmmcall";
    vmptrld* = 517; vmptrldStr* = "vmptrld";
    vmptrst* = 518; vmptrstStr* = "vmptrst";
    vmresume* = 519; vmresumeStr* = "vmresume";
    vmrun* = 520; vmrunStr* = "vmrun";
    vmsave* = 521; vmsaveStr* = "vmsave";
    vmxoff* = 522; vmxoffStr* = "vmxoff";
    vmxon* = 523; vmxonStr* = "vmxon";
    wait* = 524; waitStr* = "wait";
    wbinvd* = 525; wbinvdStr* = "wbinvd";
    wrmsr* = 526; wrmsrStr* = "wrmsr";
    xadd* = 527; xaddStr* = "xadd";
    xchg* = 528; xchgStr* = "xchg";
    xlatb* = 529; xlatbStr* = "xlatb";
    xor* = 530; xorStr* = "xor";
    xorpd* = 531; xorpdStr* = "xorpd";
    xorps* = 532; xorpsStr* = "xorps";

  TYPE

  VAR
   
  PROCEDURE code*(i: INTEGER; VAR s: ARRAY OF CHAR);
  BEGIN
    s := undeterminedStr;
    IF i = invalid THEN s:= invalidStr END;
    IF i = aaa THEN s:= aaaStr END;
    IF i = aad THEN s:= aadStr END;
    IF i = aam THEN s:= aamStr END;
    IF i = aas THEN s:= aasStr END;
    IF i = adc THEN s:= adcStr END;
    IF i = add THEN s:= addStr END;
    IF i = addpd THEN s:= addpdStr END;
    IF i = addps THEN s:= addpsStr END;
    IF i = addsd THEN s:= addsdStr END;
    IF i = addss THEN s:= addssStr END;
    IF i = addsubpd THEN s:= addsubpdStr END;
    IF i = addsubps THEN s:= addsubpsStr END;
    IF i = and THEN s:= andStr END;
    IF i = andnpd THEN s:= andnpdStr END;
    IF i = andnps THEN s:= andnpsStr END;
    IF i = andpd THEN s:= andpdStr END;
    IF i = andps THEN s:= andpsStr END;
    IF i = arpl THEN s:= arplStr END;
    IF i = bound THEN s:= boundStr END;
    IF i = bsf THEN s:= bsfStr END;
    IF i = bsr THEN s:= bsrStr END;
    IF i = bswap THEN s:= bswapStr END;
    IF i = bt THEN s:= btStr END;
    IF i = btc THEN s:= btcStr END;
    IF i = btr THEN s:= btrStr END;
    IF i = bts THEN s:= btsStr END;
    IF i = call THEN s:= callStr END;
    IF i = cbw THEN s:= cbwStr END;
    IF i = cdq THEN s:= cdqStr END;
    IF i = cdqe THEN s:= cdqeStr END;
    IF i = clc THEN s:= clcStr END;
    IF i = cld THEN s:= cldStr END;
    IF i = clflush THEN s:= clflushStr END;
    IF i = clgi THEN s:= clgiStr END;
    IF i = cli THEN s:= cliStr END;
    IF i = clts THEN s:= cltsStr END;
    IF i = cmc THEN s:= cmcStr END;
    IF i = cmova THEN s:= cmovaStr END;
    IF i = cmovae THEN s:= cmovaeStr END;
    IF i = cmovb THEN s:= cmovbStr END;
    IF i = cmovbe THEN s:= cmovbeStr END;
    IF i = cmovg THEN s:= cmovgStr END;
    IF i = cmovge THEN s:= cmovgeStr END;
    IF i = cmovl THEN s:= cmovlStr END;
    IF i = cmovle THEN s:= cmovleStr END;
    IF i = cmovno THEN s:= cmovnoStr END;
    IF i = cmovnp THEN s:= cmovnpStr END;
    IF i = cmovns THEN s:= cmovnsStr END;
    IF i = cmovnz THEN s:= cmovnzStr END;
    IF i = cmovo THEN s:= cmovoStr END;
    IF i = cmovp THEN s:= cmovpStr END;
    IF i = cmovs THEN s:= cmovsStr END;
    IF i = cmovz THEN s:= cmovzStr END;
    IF i = cmp THEN s:= cmpStr END;
    IF i = cmppd THEN s:= cmppdStr END;
    IF i = cmpps THEN s:= cmppsStr END;
    IF i = cmpsb THEN s:= cmpsbStr END;
    IF i = cmpsd THEN s:= cmpsdStr END;
    IF i = cmpsq THEN s:= cmpsqStr END;
    IF i = cmpss THEN s:= cmpssStr END;
    IF i = cmpsw THEN s:= cmpswStr END;
    IF i = cmpxchg THEN s:= cmpxchgStr END;
    IF i = cmpxchg8b THEN s:= cmpxchg8bStr END;
    IF i = comisd THEN s:= comisdStr END;
    IF i = comiss THEN s:= comissStr END;
    IF i = cpuid THEN s:= cpuidStr END;
    IF i = cqo THEN s:= cqoStr END;               (*
    IF i = cvtdq2pd THEN s:= cvtdq2pdStr END;
    IF i = cvtdq2ps THEN s:= cvtdq2psStr END;
    IF i = cvtpd2dq THEN s:= cvtpd2dqStr END;
    IF i = cvtpd2pi THEN s:= cvtpd2piStr END;
    IF i = cvtpd2ps THEN s:= cvtpd2psStr END;
    IF i = cvtpi2pd THEN s:= cvtpi2pdStr END;
    IF i = cvtpi2ps THEN s:= cvtpi2psStr END;
    IF i = cvtps2dq THEN s:= cvtps2dqStr END;
    IF i = cvtps2pd THEN s:= cvtps2pdStr END;
    IF i = cvtps2pi THEN s:= cvtps2piStr END;
    IF i = cvtsd2si THEN s:= cvtsd2siStr END;
    IF i = cvtsd2ss THEN s:= cvtsd2ssStr END;
    IF i = cvtsi2sd THEN s:= cvtsi2sdStr END;
    IF i = cvtsi2ss THEN s:= cvtsi2ssStr END;
    IF i = cvtss2sd THEN s:= cvtss2sdStr END;
    IF i = cvtss2si THEN s:= cvtss2siStr END;
    IF i = cvttpd2dq THEN s:= cvttpd2dqStr END;
    IF i = cvttpd2pi THEN s:= cvttpd2piStr END;
    IF i = cvttps2dq THEN s:= cvttps2dqStr END;
    IF i = cvttps2pi THEN s:= cvttps2piStr END;
    IF i = cvttsd2si THEN s:= cvttsd2siStr END;
    IF i = cvttss2si THEN s:= cvttss2siStr END;   *)
    IF i = cwd THEN s:= cwdStr END;
    IF i = cwde THEN s:= cwdeStr END;
    IF i = daa THEN s:= daaStr END;
    IF i = das THEN s:= dasStr END;
    IF i = dec THEN s:= decStr END;
    IF i = div THEN s:= divStr END;
    IF i = divpd THEN s:= divpdStr END;
    IF i = divps THEN s:= divpsStr END;
    IF i = divsd THEN s:= divsdStr END;
    IF i = divss THEN s:= divssStr END;
    IF i = emms THEN s:= emmsStr END;
    IF i = undetermined THEN s:= undeterminedStr END;
    IF i = enter THEN s:= enterStr END;
    IF i = f2xm1 THEN s:= f2xm1Str END;
    IF i = fabs THEN s:= fabsStr END;
    IF i = fadd THEN s:= faddStr END;
    IF i = faddp THEN s:= faddpStr END;
    IF i = fbld THEN s:= fbldStr END;
    IF i = fbstp THEN s:= fbstpStr END;
    IF i = fchs THEN s:= fchsStr END;
    IF i = fclex THEN s:= fclexStr END;
    IF i = fcmovb THEN s:= fcmovbStr END;
    IF i = fcmovbe THEN s:= fcmovbeStr END;
    IF i = fcmove THEN s:= fcmoveStr END;
    IF i = fcmovnb THEN s:= fcmovnbStr END;
    IF i = fcmovnbe THEN s:= fcmovnbeStr END;
    IF i = fcmovne THEN s:= fcmovneStr END;
    IF i = fcmovnu THEN s:= fcmovnuStr END;
    IF i = fcmovu THEN s:= fcmovuStr END;
    IF i = fcom THEN s:= fcomStr END;
    IF i = fcom2 THEN s:= fcom2Str END;
    IF i = fcomi THEN s:= fcomiStr END;
    IF i = fcomip THEN s:= fcomipStr END;
    IF i = fcomp THEN s:= fcompStr END;
    IF i = fcomp3 THEN s:= fcomp3Str END;
    IF i = fcomp5 THEN s:= fcomp5Str END;
    IF i = fcompp THEN s:= fcomppStr END;
    IF i = fcos THEN s:= fcosStr END;
    IF i = fdecstp THEN s:= fdecstpStr END;
    IF i = fdiv THEN s:= fdivStr END;
    IF i = fdivp THEN s:= fdivpStr END;
    IF i = fdivr THEN s:= fdivrStr END;
    IF i = fdivrp THEN s:= fdivrpStr END;
    IF i = femms THEN s:= femmsStr END;
    IF i = ffree THEN s:= ffreeStr END;
    IF i = ffreep THEN s:= ffreepStr END;
    IF i = fiadd THEN s:= fiaddStr END;
    IF i = ficom THEN s:= ficomStr END;
    IF i = ficomp THEN s:= ficompStr END;
    IF i = fidiv THEN s:= fidivStr END;
    IF i = fidivr THEN s:= fidivrStr END;
    IF i = fild THEN s:= fildStr END;
    IF i = fimul THEN s:= fimulStr END;
    IF i = fist THEN s:= fistStr END;
    IF i = fistp THEN s:= fistpStr END;
    IF i = fisttp THEN s:= fisttpStr END;
    IF i = fisub THEN s:= fisubStr END;
    IF i = fisubr THEN s:= fisubrStr END;
    IF i = fld THEN s:= fldStr END;
    IF i = fld1 THEN s:= fld1Str END;
    IF i = fldcw THEN s:= fldcwStr END;
    IF i = fldenv THEN s:= fldenvStr END;
    IF i = fldl2e THEN s:= fldl2eStr END;
    IF i = fldl2t THEN s:= fldl2tStr END;
    IF i = fldlg2 THEN s:= fldlg2Str END;
    IF i = fldln2 THEN s:= fldln2Str END;
    IF i = fldlpi THEN s:= fldlpiStr END;
    IF i = fldz THEN s:= fldzStr END;
    IF i = fmul THEN s:= fmulStr END;
    IF i = fmulp THEN s:= fmulpStr END;
    IF i = fncstp THEN s:= fncstpStr END;
    IF i = fninit THEN s:= fninitStr END;
    IF i = fnop THEN s:= fnopStr END;
    IF i = fnsave THEN s:= fnsaveStr END;
    IF i = fnstcw THEN s:= fnstcwStr END;
    IF i = fnstenv THEN s:= fnstenvStr END;
    IF i = fnstsw THEN s:= fnstswStr END;
    IF i = fpatan THEN s:= fpatanStr END;
    IF i = fprem THEN s:= fpremStr END;
    IF i = fprem1 THEN s:= fprem1Str END;
    IF i = fptan THEN s:= fptanStr END;
    IF i = fpxtract THEN s:= fpxtractStr END;
    IF i = frndint THEN s:= frndintStr END;
    IF i = frstor THEN s:= frstorStr END;
    IF i = fscale THEN s:= fscaleStr END;
    IF i = fsin THEN s:= fsinStr END;
    IF i = fsincos THEN s:= fsincosStr END;
    IF i = fsqrt THEN s:= fsqrtStr END;
    IF i = fst THEN s:= fstStr END;
    IF i = fstp THEN s:= fstpStr END;
    IF i = fstp1 THEN s:= fstp1Str END;
    IF i = fstp8 THEN s:= fstp8Str END;
    IF i = fstp9 THEN s:= fstp9Str END;
    IF i = fsub THEN s:= fsubStr END;
    IF i = fsubp THEN s:= fsubpStr END;
    IF i = fsubr THEN s:= fsubrStr END;
    IF i = fsubrp THEN s:= fsubrpStr END;
    IF i = ftst THEN s:= ftstStr END;
    IF i = fucom THEN s:= fucomStr END;
    IF i = fucomi THEN s:= fucomiStr END;
    IF i = fucomip THEN s:= fucomipStr END;
    IF i = fucomp THEN s:= fucompStr END;
    IF i = fucompp THEN s:= fucomppStr END;
    IF i = fxam THEN s:= fxamStr END;
    IF i = fxch THEN s:= fxchStr END;
    IF i = fxch4 THEN s:= fxch4Str END;
    IF i = fxch7 THEN s:= fxch7Str END;
    IF i = fxrstor THEN s:= fxrstorStr END;
    IF i = fxsave THEN s:= fxsaveStr END;
    IF i = fyl2x THEN s:= fyl2xStr END;
    IF i = fyl2xp1 THEN s:= fyl2xp1Str END;
    IF i = grpasize THEN s:= grpasizeStr END;
    IF i = grpmod THEN s:= grpmodStr END;
    IF i = grpmode THEN s:= grpmodeStr END;
    IF i = grposize THEN s:= grposizeStr END;
    IF i = grpreg THEN s:= grpregStr END;
    IF i = grprm THEN s:= grprmStr END;
    IF i = grpv THEN s:= grpvStr END;
    IF i = grpx87 THEN s:= grpx87Str END;
    IF i = haddpd THEN s:= haddpdStr END;
    IF i = haddps THEN s:= haddpsStr END;
    IF i = hlt THEN s:= hltStr END;
    IF i = hsubpd THEN s:= hsubpdStr END;
    IF i = hsubps THEN s:= hsubpsStr END;
    IF i = idiv THEN s:= idivStr END;
    IF i = foo THEN s:= fooStr END;
    IF i = imul THEN s:= imulStr END;
    IF i = in THEN s:= inStr END;
    IF i = inc THEN s:= incStr END;
    IF i = inop THEN s:= inopStr END;
    IF i = insb THEN s:= insbStr END;
    IF i = insd THEN s:= insdStr END;
    IF i = insw THEN s:= inswStr END;
    IF i = int THEN s:= intStr END;
    IF i = int1 THEN s:= int1Str END;
    IF i = int3 THEN s:= int3Str END;
    IF i = into THEN s:= intoStr END;
    IF i = bar THEN s:= barStr END;
    IF i = invd THEN s:= invdStr END;
    IF i = invlpg THEN s:= invlpgStr END;
    IF i = invlpga THEN s:= invlpgaStr END;
    IF i = ipause THEN s:= ipauseStr END;
    IF i = iretd THEN s:= iretdStr END;
    IF i = iretq THEN s:= iretqStr END;
    IF i = iretw THEN s:= iretwStr END;
    IF i = ja THEN s:= jaStr END;
    IF i = jae THEN s:= jaeStr END;
    IF i = jb THEN s:= jbStr END;
    IF i = jbe THEN s:= jbeStr END;
    IF i = jcxz THEN s:= jcxzStr END;
    IF i = jecxz THEN s:= jecxzStr END;
    IF i = jg THEN s:= jgStr END;
    IF i = jge THEN s:= jgeStr END;
    IF i = jl THEN s:= jlStr END;
    IF i = jle THEN s:= jleStr END;
    IF i = jmp THEN s:= jmpStr END;
    IF i = jno THEN s:= jnoStr END;
    IF i = jnp THEN s:= jnpStr END;
    IF i = jns THEN s:= jnsStr END;
    IF i = jnz THEN s:= jnzStr END;
    IF i = jo THEN s:= joStr END;
    IF i = jp THEN s:= jpStr END;
    IF i = jrcxz THEN s:= jrcxzStr END;
    IF i = js THEN s:= jsStr END;
    IF i = jz THEN s:= jzStr END;
    IF i = lahf THEN s:= lahfStr END;
    IF i = lar THEN s:= larStr END;
    IF i = lddqu THEN s:= lddquStr END;
    IF i = ldmxcsr THEN s:= ldmxcsrStr END;
    IF i = lds THEN s:= ldsStr END;
    IF i = lea THEN s:= leaStr END;
    IF i = leave THEN s:= leaveStr END;
    IF i = les THEN s:= lesStr END;
    IF i = lfence THEN s:= lfenceStr END;
    IF i = lfs THEN s:= lfsStr END;
    IF i = lgdt THEN s:= lgdtStr END;
    IF i = lgs THEN s:= lgsStr END;
    IF i = lidt THEN s:= lidtStr END;
    IF i = lldt THEN s:= lldtStr END;
    IF i = lmsw THEN s:= lmswStr END;
    IF i = lock THEN s:= lockStr END;
    IF i = lodsb THEN s:= lodsbStr END;
    IF i = lodsd THEN s:= lodsdStr END;
    IF i = lodsq THEN s:= lodsqStr END;
    IF i = lodsw THEN s:= lodswStr END;
    IF i = loop THEN s:= loopStr END;
    IF i = loope THEN s:= loopeStr END;
    IF i = loopnz THEN s:= loopnzStr END;
    IF i = lsl THEN s:= lslStr END;
    IF i = lss THEN s:= lssStr END;
    IF i = ltr THEN s:= ltrStr END;
    IF i = maskmovq THEN s:= maskmovqStr END;
    IF i = maxpd THEN s:= maxpdStr END;
    IF i = maxps THEN s:= maxpsStr END;
    IF i = maxsd THEN s:= maxsdStr END;
    IF i = maxss THEN s:= maxssStr END;
    IF i = mfence THEN s:= mfenceStr END;
    IF i = minpd THEN s:= minpdStr END;
    IF i = minps THEN s:= minpsStr END;
    IF i = minsd THEN s:= minsdStr END;
    IF i = minss THEN s:= minssStr END;
    IF i = monitor THEN s:= monitorStr END;
    IF i = mov THEN s:= movStr END;
    IF i = movapd THEN s:= movapdStr END;
    IF i = movaps THEN s:= movapsStr END;
    IF i = movd THEN s:= movdStr END;
    IF i = movddup THEN s:= movddupStr END;
    IF i = movdq2q THEN s:= movdq2qStr END;
    IF i = movdqa THEN s:= movdqaStr END;
    IF i = movdqu THEN s:= movdquStr END;
    IF i = movhpd THEN s:= movhpdStr END;
    IF i = movhps THEN s:= movhpsStr END;
    IF i = movlpd THEN s:= movlpdStr END;
    IF i = movlps THEN s:= movlpsStr END;
    IF i = movmskpd THEN s:= movmskpdStr END;
    IF i = movmskps THEN s:= movmskpsStr END;
    IF i = movntdq THEN s:= movntdqStr END;
    IF i = movnti THEN s:= movntiStr END;
    IF i = movntpd THEN s:= movntpdStr END;
    IF i = movntps THEN s:= movntpsStr END;
    IF i = movntq THEN s:= movntqStr END;
    IF i = movq THEN s:= movqStr END;
    IF i = movq2dq THEN s:= movq2dqStr END;
    IF i = movqa THEN s:= movqaStr END;
    IF i = movsb THEN s:= movsbStr END;
    IF i = movsd THEN s:= movsdStr END;
    IF i = movshdup THEN s:= movshdupStr END;
    IF i = movsldup THEN s:= movsldupStr END;
    IF i = movsq THEN s:= movsqStr END;
    IF i = movss THEN s:= movssStr END;
    IF i = movsw THEN s:= movswStr END;
    IF i = movsx THEN s:= movsxStr END;
    IF i = movsxd THEN s:= movsxdStr END;
    IF i = movupd THEN s:= movupdStr END;
    IF i = movups THEN s:= movupsStr END;
    IF i = movzx THEN s:= movzxStr END;
    IF i = mul THEN s:= mulStr END;
    IF i = mulpd THEN s:= mulpdStr END;
    IF i = mulps THEN s:= mulpsStr END;
    IF i = mulsd THEN s:= mulsdStr END;
    IF i = mulss THEN s:= mulssStr END;
    IF i = mwait THEN s:= mwaitStr END;
    IF i = neg THEN s:= negStr END;
    IF i = nop THEN s:= nopStr END;
    IF i = not THEN s:= notStr END;
    IF i = or THEN s:= orStr END;
    IF i = orpd THEN s:= orpdStr END;
    IF i = orps THEN s:= orpsStr END;
    IF i = out THEN s:= outStr END;
    IF i = outsb THEN s:= outsbStr END;
    IF i = outsd THEN s:= outsdStr END;
    IF i = outsq THEN s:= outsqStr END;
    IF i = outsw THEN s:= outswStr END;
    IF i = packssdw THEN s:= packssdwStr END;
    IF i = packsswb THEN s:= packsswbStr END;
    IF i = packuswb THEN s:= packuswbStr END;
    IF i = paddb THEN s:= paddbStr END;
    IF i = paddq THEN s:= paddqStr END;
    IF i = paddsb THEN s:= paddsbStr END;
    IF i = paddsw THEN s:= paddswStr END;
    IF i = paddusb THEN s:= paddusbStr END;
    IF i = paddusw THEN s:= padduswStr END;
    IF i = paddw THEN s:= paddwStr END;
    IF i = pand THEN s:= pandStr END;
    IF i = pandn THEN s:= pandnStr END;
    IF i = pavgb THEN s:= pavgbStr END;
    IF i = pavgw THEN s:= pavgwStr END;
    IF i = pcmpeqb THEN s:= pcmpeqbStr END;
    IF i = pcmpeqd THEN s:= pcmpeqdStr END;
    IF i = pcmpeqw THEN s:= pcmpeqwStr END;
    IF i = pcmpgtb THEN s:= pcmpgtbStr END;
    IF i = pcmpgtd THEN s:= pcmpgtdStr END;
    IF i = pcmpgtw THEN s:= pcmpgtwStr END;
    IF i = pextrw THEN s:= pextrwStr END;
    IF i = pinsrw THEN s:= pinsrwStr END;
    IF i = pmaddwd THEN s:= pmaddwdStr END;
    IF i = pmaxsw THEN s:= pmaxswStr END;
    IF i = pmaxub THEN s:= pmaxubStr END;
    IF i = pminsw THEN s:= pminswStr END;
    IF i = pminub THEN s:= pminubStr END;
    IF i = pmovmskb THEN s:= pmovmskbStr END;
    IF i = pmulhuw THEN s:= pmulhuwStr END;
    IF i = pmulhw THEN s:= pmulhwStr END;
    IF i = pmullw THEN s:= pmullwStr END;
    IF i = pmuludq THEN s:= pmuludqStr END;
    IF i = pop THEN s:= popStr END;
    IF i = popa THEN s:= popaStr END;
    IF i = popad THEN s:= popadStr END;
    IF i = popfd THEN s:= popfdStr END;
    IF i = popfq THEN s:= popfqStr END;
    IF i = popfw THEN s:= popfwStr END;
    IF i = por THEN s:= porStr END;
    IF i = prefetch THEN s:= prefetchStr END;
    IF i = prefetchnta THEN s:= prefetchntaStr END;
    IF i = prefetcht0 THEN s:= prefetcht0Str END;
    IF i = prefetcht1 THEN s:= prefetcht1Str END;
    IF i = prefetcht2 THEN s:= prefetcht2Str END;
    IF i = baz THEN s:= bazStr END;
    IF i = psadbw THEN s:= psadbwStr END;
    IF i = pshufd THEN s:= pshufdStr END;
    IF i = pshufhw THEN s:= pshufhwStr END;
    IF i = pshuflw THEN s:= pshuflwStr END;
    IF i = pshufw THEN s:= pshufwStr END;
    IF i = pslld THEN s:= pslldStr END;
    IF i = pslldq THEN s:= pslldqStr END;
    IF i = psllq THEN s:= psllqStr END;
    IF i = psllw THEN s:= psllwStr END;
    IF i = psrad THEN s:= psradStr END;
    IF i = psraw THEN s:= psrawStr END;
    IF i = psrld THEN s:= psrldStr END;
    IF i = psrldq THEN s:= psrldqStr END;
    IF i = psrlq THEN s:= psrlqStr END;
    IF i = psrlw THEN s:= psrlwStr END;
    IF i = psubb THEN s:= psubbStr END;
    IF i = psubd THEN s:= psubdStr END;
    IF i = psubq THEN s:= psubqStr END;
    IF i = psubsb THEN s:= psubsbStr END;
    IF i = psubsw THEN s:= psubswStr END;
    IF i = psubusb THEN s:= psubusbStr END;
    IF i = psubusw THEN s:= psubuswStr END;
    IF i = psubw THEN s:= psubwStr END;           (*
    IF i = punpckhbw THEN s:= punpckhbwStr END;
    IF i = punpckhdq THEN s:= punpckhdqStr END;
    IF i = punpckhqdq THEN s:= punpckhqdqStr END;
    IF i = punpckhwd THEN s:= punpckhwdStr END;
    IF i = punpcklbw THEN s:= punpcklbwStr END;
    IF i = punpckldq THEN s:= punpckldqStr END;
    IF i = punpcklqdq THEN s:= punpcklqdqStr END;
    IF i = punpcklwd THEN s:= punpcklwdStr END;    *)
    IF i = push THEN s:= pushStr END;
    IF i = pusha THEN s:= pushaStr END;
    IF i = pushad THEN s:= pushadStr END;
    IF i = pushfd THEN s:= pushfdStr END;
    IF i = pushfq THEN s:= pushfqStr END;
    IF i = pushfw THEN s:= pushfwStr END;
    IF i = pxor THEN s:= pxorStr END;
    IF i = rcl THEN s:= rclStr END;
    IF i = rcpps THEN s:= rcppsStr END;
    IF i = rcpss THEN s:= rcpssStr END;
    IF i = rcr THEN s:= rcrStr END;
    IF i = rdmsr THEN s:= rdmsrStr END;
    IF i = rdpmc THEN s:= rdpmcStr END;
    IF i = rdtsc THEN s:= rdtscStr END;
    IF i = rdtscp THEN s:= rdtscpStr END;
    IF i = rep THEN s:= repStr END;
    IF i = repne THEN s:= repneStr END;
    IF i = ret THEN s:= retStr END;
    IF i = retf THEN s:= retfStr END;
    IF i = rol THEN s:= rolStr END;
    IF i = ror THEN s:= rorStr END;
    IF i = rsm THEN s:= rsmStr END;
    IF i = rsqrtps THEN s:= rsqrtpsStr END;
    IF i = rsqrtss THEN s:= rsqrtssStr END;
    IF i = sahf THEN s:= sahfStr END;
    IF i = salc THEN s:= salcStr END;
    IF i = sar THEN s:= sarStr END;
    IF i = sbb THEN s:= sbbStr END;
    IF i = scasb THEN s:= scasbStr END;
    IF i = scasd THEN s:= scasdStr END;
    IF i = scasq THEN s:= scasqStr END;
    IF i = scasw THEN s:= scaswStr END;
    IF i = seta THEN s:= setaStr END;
    IF i = setb THEN s:= setbStr END;
    IF i = setbe THEN s:= setbeStr END;
    IF i = setg THEN s:= setgStr END;
    IF i = setge THEN s:= setgeStr END;
    IF i = setl THEN s:= setlStr END;
    IF i = setle THEN s:= setleStr END;
    IF i = setnb THEN s:= setnbStr END;
    IF i = setno THEN s:= setnoStr END;
    IF i = setnp THEN s:= setnpStr END;
    IF i = setns THEN s:= setnsStr END;
    IF i = setnz THEN s:= setnzStr END;
    IF i = seto THEN s:= setoStr END;
    IF i = setp THEN s:= setpStr END;
    IF i = sets THEN s:= setsStr END;
    IF i = setz THEN s:= setzStr END;
    IF i = sfence THEN s:= sfenceStr END;
    IF i = sgdt THEN s:= sgdtStr END;
    IF i = shl THEN s:= shlStr END;
    IF i = shld THEN s:= shldStr END;
    IF i = shr THEN s:= shrStr END;
    IF i = shrd THEN s:= shrdStr END;
    IF i = shufpd THEN s:= shufpdStr END;
    IF i = shufps THEN s:= shufpsStr END;
    IF i = sidt THEN s:= sidtStr END;
    IF i = skinit THEN s:= skinitStr END;
    IF i = sldt THEN s:= sldtStr END;
    IF i = smsw THEN s:= smswStr END;
    IF i = sqrtpd THEN s:= sqrtpdStr END;
    IF i = sqrtps THEN s:= sqrtpsStr END;
    IF i = sqrtsd THEN s:= sqrtsdStr END;
    IF i = sqrtss THEN s:= sqrtssStr END;
    IF i = stc THEN s:= stcStr END;
    IF i = std THEN s:= stdStr END;
    IF i = stgi THEN s:= stgiStr END;
    IF i = sti THEN s:= stiStr END;
    IF i = stmxcsr THEN s:= stmxcsrStr END;
    IF i = stosb THEN s:= stosbStr END;
    IF i = stosd THEN s:= stosdStr END;
    IF i = stosq THEN s:= stosqStr END;
    IF i = stosw THEN s:= stoswStr END;
    IF i = str THEN s:= strStr END;
    IF i = sub THEN s:= subStr END;
    IF i = subpd THEN s:= subpdStr END;
    IF i = subps THEN s:= subpsStr END;
    IF i = subsd THEN s:= subsdStr END;
    IF i = subss THEN s:= subssStr END;
    IF i = swapgs THEN s:= swapgsStr END;
    IF i = syscall THEN s:= syscallStr END;
    IF i = sysenter THEN s:= sysenterStr END;
    IF i = sysexit THEN s:= sysexitStr END;
    IF i = sysret THEN s:= sysretStr END;
    IF i = test THEN s:= testStr END;
    IF i = ucomisd THEN s:= ucomisdStr END;
    IF i = ucomiss THEN s:= ucomissStr END;
    IF i = ud2 THEN s:= ud2Str END;
    IF i = unpckhpd THEN s:= unpckhpdStr END;
    IF i = unpckhps THEN s:= unpckhpsStr END;
    IF i = unpcklpd THEN s:= unpcklpdStr END;
    IF i = unpcklps THEN s:= unpcklpsStr END;
    IF i = verr THEN s:= verrStr END;
    IF i = verw THEN s:= verwStr END;
    IF i = vmcall THEN s:= vmcallStr END;
    IF i = vmclear THEN s:= vmclearStr END;
    IF i = vmload THEN s:= vmloadStr END;
    IF i = vmmcall THEN s:= vmmcallStr END;
    IF i = vmptrld THEN s:= vmptrldStr END;
    IF i = vmptrst THEN s:= vmptrstStr END;
    IF i = vmresume THEN s:= vmresumeStr END;
    IF i = vmrun THEN s:= vmrunStr END;
    IF i = vmsave THEN s:= vmsaveStr END;
    IF i = vmxoff THEN s:= vmxoffStr END;
    IF i = vmxon THEN s:= vmxonStr END;
    IF i = wait THEN s:= waitStr END;
    IF i = wbinvd THEN s:= wbinvdStr END;
    IF i = wrmsr THEN s:= wrmsrStr END;
    IF i = xadd THEN s:= xaddStr END;
    IF i = xchg THEN s:= xchgStr END;
    IF i = xlatb THEN s:= xlatbStr END;
    IF i = xor THEN s:= xorStr END;
    IF i = xorpd THEN s:= xorpdStr END;
    IF i = xorps THEN s:= xorpsStr END;
  END code;
 
BEGIN
    
END OIDisOpcodes.






































